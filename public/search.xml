<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blastp的本地化使用</title>
    <url>/2021/09/16/blastp/</url>
    <content><![CDATA[<center>blastp在Windows系统电脑上的本地使用</center>
<span id="more"></span>

<h2 id="下载blast到本地"><a href="#下载blast到本地" class="headerlink" title="下载blast到本地"></a>下载blast到本地</h2><p>在NCBI官网找到blast工具即可找到下载链接，根据提示一步步完成下载即可。<br>官网下载链接：<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download">blast tools</a><br>网站打开速度较慢，挂梯可能会好一点。</p>
<h2 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h2><h3 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h3><p>从uniprot下载所需参考蛋白质组的fast.a文件作为建库文件此处以人类蛋白质组为例  </p>
<pre><code>$ makeblastdb -in uniprot-proteome%3AUP000005640.fasta -dbtype prot -parse_seqids -hash_index -out human
# 在blast-2.6.0/bin文件夹下运行该命令或在makeblastdb前加上该程序所在的路径

# 参数说明
# -in 所需建库的参考蛋白质组
# -out 输出的库名
# -dbtype 蛋白质组用prot，核酸组用nucl
# parse_seqids =&gt; Parse Seq-ids in FASTA input
# -hash_index =&gt; Create index of sequence hash values
</code></pre>
<h3 id="搜库比对"><a href="#搜库比对" class="headerlink" title="搜库比对"></a>搜库比对</h3><p>将query序列比对到参考序列。此处用小鼠蛋白质组和人蛋白质组进行比对，运行如下命令：</p>
<pre><code>$ blastp.exe -query uniprot-proteome%3AUP000000589.fasta -db human -evalue 1e-3 -out blast.xml -outfmt &quot;5&quot; -num_alignments 10 -num_threads 2
#在blast-2.6.0/bin文件夹下运行该命令或在blastp.exe前加上该程序所在的路径

# 参数说明
# -query 输入文件名，也就是需要比对的序列文件
# -db 格式化后的数据库名称
# -evalue 设定输出结果中的e-value阈值
# -out 输出文件名
# -num_alignments 输出比对上的序列的最大值条目数
# -num_threads 线程数
# 此外还有：
# -num_descriptions 对比对上序列的描述信息，一般跟tabular格式连用
# -outfmt
#   0 = pairwise,
#   1 = query-anchored showing identities,
#   2 = query-anchored no identities,
#   3 = flat query-anchored, show identities,
#   4 = flat query-anchored, no identities,
#   5 = XML Blast output,
#   6 = tabular,
#   7 = tabular with comment lines,
#   8 = Text ASN.1,
#   9 = Binary ASN.1
#  10 = Comma-separated values
</code></pre>
<h3 id="提取搜库结果中的信息"><a href="#提取搜库结果中的信息" class="headerlink" title="提取搜库结果中的信息"></a>提取搜库结果中的信息</h3><h2 id="xml文件所含的信息"><a href="#xml文件所含的信息" class="headerlink" title="xml文件所含的信息"></a>xml文件所含的信息</h2><p>使用outfmt 5参数的话，会产生一个xml格式的文件，对比信息很完整。一个序列的完整比对信息如下所示：</p>
<pre><code>&lt;Iteration&gt;
&lt;Iteration_iter-num&gt;1&lt;/Iteration_iter-num&gt;
&lt;Iteration_query-ID&gt;Query_1&lt;/Iteration_query-ID&gt;
&lt;Iteration_query-def&gt;sp|Q62302|TX261_MOUSE Protein TEX261 OS=Mus musculus OX=10090 GN=Tex261 PE=2 SV=1&lt;/Iteration_query-def&gt;
&lt;Iteration_query-len&gt;196&lt;/Iteration_query-len&gt;
&lt;Iteration_hits&gt;
&lt;Hit&gt;
&lt;Hit_num&gt;1&lt;/Hit_num&gt;
&lt;Hit_id&gt;sp|Q6UWH6|TX261_HUMAN&lt;/Hit_id&gt;
&lt;Hit_def&gt;Protein TEX261 OS=Homo sapiens OX=9606 GN=TEX261 PE=2 SV=1&lt;/Hit_def&gt;
&lt;Hit_accession&gt;Q6UWH6&lt;/Hit_accession&gt;
&lt;Hit_len&gt;196&lt;/Hit_len&gt;
&lt;Hit_hsps&gt;
  &lt;Hsp&gt;
    &lt;Hsp_num&gt;1&lt;/Hsp_num&gt;
    &lt;Hsp_bit-score&gt;391.734&lt;/Hsp_bit-score&gt;
    &lt;Hsp_score&gt;1005&lt;/Hsp_score&gt;
    &lt;Hsp_evalue&gt;8.09539e-141&lt;/Hsp_evalue&gt;
    &lt;Hsp_query-from&gt;1&lt;/Hsp_query-from&gt;
    &lt;Hsp_query-to&gt;196&lt;/Hsp_query-to&gt;
    &lt;Hsp_hit-from&gt;1&lt;/Hsp_hit-from&gt;
    &lt;Hsp_hit-to&gt;196&lt;/Hsp_hit-to&gt;
    &lt;Hsp_query-frame&gt;0&lt;/Hsp_query-frame&gt;
    &lt;Hsp_hit-frame&gt;0&lt;/Hsp_hit-frame&gt;
    &lt;Hsp_identity&gt;195&lt;/Hsp_identity&gt;
    &lt;Hsp_positive&gt;196&lt;/Hsp_positive&gt;
    &lt;Hsp_gaps&gt;0&lt;/Hsp_gaps&gt;
    &lt;Hsp_align-len&gt;196&lt;/Hsp_align-len&gt;
    &lt;Hsp_qseq&gt;MWFMYVLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPGDDVVSNYFTKGKRGKRLGILVVFSFIKEAILPSRQKIY&lt;/Hsp_qseq&gt;
    &lt;Hsp_hseq&gt;MWFMYLLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPGDDVVSNYFTKGKRGKRLGILVVFSFIKEAILPSRQKIY&lt;/Hsp_hseq&gt;
    &lt;Hsp_midline&gt;MWFMY+LSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPGDDVVSNYFTKGKRGKRLGILVVFSFIKEAILPSRQKIY&lt;/Hsp_midline&gt;
  &lt;/Hsp&gt;
&lt;/Hit_hsps&gt;
&lt;/Hit&gt;
&lt;Hit&gt;
&lt;Hit_num&gt;2&lt;/Hit_num&gt;
&lt;Hit_id&gt;tr|U3KQ87|U3KQ87_HUMAN&lt;/Hit_id&gt;
&lt;Hit_def&gt;Uncharacterized protein OS=Homo sapiens OX=9606 PE=4 SV=1&lt;/Hit_def&gt;
&lt;Hit_accession&gt;U3KQ87&lt;/Hit_accession&gt;
&lt;Hit_len&gt;197&lt;/Hit_len&gt;
&lt;Hit_hsps&gt;
  &lt;Hsp&gt;
    &lt;Hsp_num&gt;1&lt;/Hsp_num&gt;
    &lt;Hsp_bit-score&gt;312.768&lt;/Hsp_bit-score&gt;
    &lt;Hsp_score&gt;800&lt;/Hsp_score&gt;
    &lt;Hsp_evalue&gt;1.35723e-109&lt;/Hsp_evalue&gt;
    &lt;Hsp_query-from&gt;1&lt;/Hsp_query-from&gt;
    &lt;Hsp_query-to&gt;158&lt;/Hsp_query-to&gt;
    &lt;Hsp_hit-from&gt;1&lt;/Hsp_hit-from&gt;
    &lt;Hsp_hit-to&gt;158&lt;/Hsp_hit-to&gt;
    &lt;Hsp_query-frame&gt;0&lt;/Hsp_query-frame&gt;
    &lt;Hsp_hit-frame&gt;0&lt;/Hsp_hit-frame&gt;
    &lt;Hsp_identity&gt;157&lt;/Hsp_identity&gt;
    &lt;Hsp_positive&gt;158&lt;/Hsp_positive&gt;
    &lt;Hsp_gaps&gt;0&lt;/Hsp_gaps&gt;
    &lt;Hsp_align-len&gt;158&lt;/Hsp_align-len&gt;
    &lt;Hsp_qseq&gt;MWFMYVLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPG&lt;/Hsp_qseq&gt;
    &lt;Hsp_hseq&gt;MWFMYLLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPG&lt;/Hsp_hseq&gt;
    &lt;Hsp_midline&gt;MWFMY+LSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIWFSTAVLIGLYVFERFPTSMIGVGLFTNLVYFGLLQTFPFIMLTSPNFILSCGLVVVNHYLAFQFFAEEYYPFSEVLAYFTFCLWIIPFAFFVSLSAGENVLPSTMQPG&lt;/Hsp_midline&gt;
  &lt;/Hsp&gt;
&lt;/Hit_hsps&gt;
&lt;/Hit&gt;
&lt;Hit&gt;
&lt;Hit_num&gt;3&lt;/Hit_num&gt;
&lt;Hit_id&gt;tr|F8WAR8|F8WAR8_HUMAN&lt;/Hit_id&gt;
&lt;Hit_def&gt;Protein TEX261 OS=Homo sapiens OX=9606 GN=TEX261 PE=4 SV=1&lt;/Hit_def&gt;
&lt;Hit_accession&gt;F8WAR8&lt;/Hit_accession&gt;
&lt;Hit_len&gt;51&lt;/Hit_len&gt;
&lt;Hit_hsps&gt;
  &lt;Hsp&gt;
    &lt;Hsp_num&gt;1&lt;/Hsp_num&gt;
    &lt;Hsp_bit-score&gt;98.5969&lt;/Hsp_bit-score&gt;
    &lt;Hsp_score&gt;244&lt;/Hsp_score&gt;
    &lt;Hsp_evalue&gt;4.07837e-27&lt;/Hsp_evalue&gt;
    &lt;Hsp_query-from&gt;1&lt;/Hsp_query-from&gt;
    &lt;Hsp_query-to&gt;50&lt;/Hsp_query-to&gt;
    &lt;Hsp_hit-from&gt;1&lt;/Hsp_hit-from&gt;
    &lt;Hsp_hit-to&gt;50&lt;/Hsp_hit-to&gt;
    &lt;Hsp_query-frame&gt;0&lt;/Hsp_query-frame&gt;
    &lt;Hsp_hit-frame&gt;0&lt;/Hsp_hit-frame&gt;
    &lt;Hsp_identity&gt;49&lt;/Hsp_identity&gt;
    &lt;Hsp_positive&gt;50&lt;/Hsp_positive&gt;
    &lt;Hsp_gaps&gt;0&lt;/Hsp_gaps&gt;
    &lt;Hsp_align-len&gt;50&lt;/Hsp_align-len&gt;
    &lt;Hsp_qseq&gt;MWFMYVLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_qseq&gt;
    &lt;Hsp_hseq&gt;MWFMYLLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_hseq&gt;
    &lt;Hsp_midline&gt;MWFMY+LSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_midline&gt;
  &lt;/Hsp&gt;
&lt;/Hit_hsps&gt;
&lt;/Hit&gt;
&lt;Hit&gt;
&lt;Hit_num&gt;4&lt;/Hit_num&gt;
&lt;Hit_id&gt;tr|U3KQC7|U3KQC7_HUMAN&lt;/Hit_id&gt;
&lt;Hit_def&gt;Uncharacterized protein (Fragment) OS=Homo sapiens OX=9606 PE=4 SV=1&lt;/Hit_def&gt;
&lt;Hit_accession&gt;U3KQC7&lt;/Hit_accession&gt;
&lt;Hit_len&gt;49&lt;/Hit_len&gt;
&lt;Hit_hsps&gt;
  &lt;Hsp&gt;
    &lt;Hsp_num&gt;1&lt;/Hsp_num&gt;
    &lt;Hsp_bit-score&gt;91.2781&lt;/Hsp_bit-score&gt;
    &lt;Hsp_score&gt;225&lt;/Hsp_score&gt;
    &lt;Hsp_evalue&gt;2.69841e-24&lt;/Hsp_evalue&gt;
    &lt;Hsp_query-from&gt;4&lt;/Hsp_query-from&gt;
    &lt;Hsp_query-to&gt;50&lt;/Hsp_query-to&gt;
    &lt;Hsp_hit-from&gt;2&lt;/Hsp_hit-from&gt;
    &lt;Hsp_hit-to&gt;48&lt;/Hsp_hit-to&gt;
    &lt;Hsp_query-frame&gt;0&lt;/Hsp_query-frame&gt;
    &lt;Hsp_hit-frame&gt;0&lt;/Hsp_hit-frame&gt;
    &lt;Hsp_identity&gt;46&lt;/Hsp_identity&gt;
    &lt;Hsp_positive&gt;47&lt;/Hsp_positive&gt;
    &lt;Hsp_gaps&gt;0&lt;/Hsp_gaps&gt;
    &lt;Hsp_align-len&gt;47&lt;/Hsp_align-len&gt;
    &lt;Hsp_qseq&gt;MYVLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_qseq&gt;
    &lt;Hsp_hseq&gt;MYLLSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_hseq&gt;
    &lt;Hsp_midline&gt;MY+LSWLSLFIQVAFITLAVAAGLYYLAELIEEYTVATSRIIKYMIW&lt;/Hsp_midline&gt;
  &lt;/Hsp&gt;
&lt;/Hit_hsps&gt;
&lt;/Hit&gt;
&lt;/Iteration_hits&gt;
&lt;Iteration_stat&gt;
  &lt;Statistics&gt;
    &lt;Statistics_db-num&gt;95943&lt;/Statistics_db-num&gt;
    &lt;Statistics_db-len&gt;38082498&lt;/Statistics_db-len&gt;
    &lt;Statistics_hsp-len&gt;101&lt;/Statistics_hsp-len&gt;
    &lt;Statistics_eff-space&gt;2697264225&lt;/Statistics_eff-space&gt;
    &lt;Statistics_kappa&gt;0.041&lt;/Statistics_kappa&gt;
    &lt;Statistics_lambda&gt;0.267&lt;/Statistics_lambda&gt;
    &lt;Statistics_entropy&gt;0.14&lt;/Statistics_entropy&gt;
  &lt;/Statistics&gt;
&lt;/Iteration_stat&gt;
&lt;/Iteration&gt;
</code></pre>
<h3 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h3><p>观察序列信息的各种标识，可从中提取有用的信息。下面是以julia语言写的一个简单粗暴提取比对上的两个蛋白(Accession)以及打分信息的脚本。</p>
<pre><code># Julia language
function main()
    ioBlast = open(&quot;blast.xml&quot;, &quot;r&quot;) 
    # 读BLAST结果
    ioBPout = open(&quot;blastresult.txt&quot;, &quot;w&quot;) 
    # 将提取的信息写入该文件
    # 自行选择方便后续步骤的文件格式
    
    write(ioBPout, &quot;Mouse\tHuman\tHsp_bit-score\thspscore\t&quot;) # 信息表头

    global Mouse_P, Human_P, bitscore, hspscore 
    # 声明变量为global，便于后续的步骤

    while !eof(ioBlast)
        # 按行读文件，若有所需信息则提取，没有则继续读取下一行
        line = readline(ioBlast)
        if occursin(r&quot;&lt;Iteration_query-def&gt;&quot;, line)
            (a, Mouse_P, c) = split(line, &quot;|&quot;)
        end
        if occursin(r&quot;&lt;Hit_id&gt;&quot;, line)
            (a, Human_P, c) = split(line, &quot;|&quot;)
        end
        if occursin(r&quot;&lt;Hsp_bit-score&gt;&quot;, line)
            (a, temps) = split(line, &quot;&gt;&quot;)
            (bitscore, c) = split(temps, &quot;&lt;&quot;)
        end
        if occursin(r&quot;&lt;Hsp_score&gt;&quot;, line)
            (a, temps) = split(line, &quot;&gt;&quot;)
            (hspscore, c) = split(temps, &quot;&lt;&quot;)
        end
        if occursin(r&quot;&lt;/Hit&gt;&quot;, line)
            write(ioBPout, Mouse_P, &quot;\t&quot;, Human_P, &quot;\t&quot;, bitscore, &quot;\t&quot;, hspscore, &quot;\n&quot;)
        end
    end

    close(ioBlast)
    close(ioBPout)            
end

main() # 运行上述函数
</code></pre>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol>
<li><a href="https://www.bioinfo-scrounger.com/archives/77/">BLAST本地化使用</a></li>
<li><a href="https://www.bioinfo-scrounger.com/archives/82/">Blast+ xml格式解读</a>  </li>
</ol>
]]></content>
      <categories>
        <category>Bioinfomatics</category>
        <category>BLAST</category>
      </categories>
      <tags>
        <tag>BLAST</tag>
        <tag>Bioinfomatics</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages搭建个人博客</title>
    <url>/2021/09/16/Hexo-GitHubPages/</url>
    <content><![CDATA[<center>本博客搭建过程中参考了许多教程。本文用于记录搭建过程，以及出现的一些小问题</center>  
<span id="more"></span>  

<br>  
<br>  

<p>有需要学习搭建博客的朋友可直接参考他人成熟的教程。本文参考教程：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/70240127">Hexo+Github Pages快速实现个人网站</a><br> 搭建流程较为清晰，整体框架都有，不想详细了解每一个步骤只是想成功搭建一个博客参考这个教程就够</li>
<li><a href="https://juejin.cn/post/6844904131266609165">彻底搞懂如何使用Hexo+GitHubPages搭建个人博客</a><br> 对于各种概念的解释都很详细，能够学习到很多知识，有助于未来对博客进行魔改升级等高级操作</li>
<li><a href="https://hexo.io/zh-cn/docs/">Hexo官方说明文档</a><br> Hexo官方说明文档，目前更新版本为1/9/2021。内容步骤简洁明了，跟着一步步做不会出大的差错，如有问题也可以直接提交</li>
<li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site">GitHub Pages官方说明文档</a><br> GitHub Pages官方说明文档，参考性不如前面三个链接，但也能提供一部分支持。</li>
</ol>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Mac和Linux系统的电脑已经预装了git.<br>Windows系统的电脑可以从官网(<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> )下载相应的版本，安装过程中选择默认选项即可。<br>由于之前简单使用过gitee加git存代码，git的配置在当初已经完成。搜索“git使用”能够找到很多有用的教程。</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>可从官网 (<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>)直接下载安装，可根据需求下载最新版本或推荐版本。需要注意的是，目前Hexo官网给出的建议是Node.js版本需不低于10.13，建议使用Node.js 12.0及以上版本。此处下载了Nodejs官网的推荐版本(recommended for most users)，14.17.6 LTS.<br>由于对Node.js并不了解，安装过程中直接选择了Automatically install the necessary tools.如果想更深入了解安装过程及自定义安装，可参考官方给出的详细安装教程(<a href="https://github.com/nodejs/node-gyp#on-windows">https://github.com/nodejs/node-gyp#on-windows</a>)</p>
<h3 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="检查Git和node-js安装情况"><a href="#检查Git和node-js安装情况" class="headerlink" title="检查Git和node.js安装情况"></a>检查Git和node.js安装情况</h4><p>安装Hexo需要git和node.js安装完成。检查电脑中这两项安装完成后，即可安装Hexo。可使用查看版本来检查是否安装成功。  </p>
<pre><code>$ npm -v  
$ node -v  
$ git --version  
</code></pre>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>上述安装成功后，只需要使用npm即可完成Hexo的安装  </p>
<pre><code>$ npm install -g hexo-cli  
</code></pre>
<p>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包  </p>
<pre><code>$ npm install hexo
</code></pre>
<h4 id="检查安装是否成功"><a href="#检查安装是否成功" class="headerlink" title="检查安装是否成功"></a>检查安装是否成功</h4><p>依然使用查看版本号的方式检查安装是否成功，运行命令：  </p>
<pre><code>$ hexo - v
</code></pre>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><pre><code>$ hexo init &lt;blogname&gt; #此处blogname可以自己起名字，此步要在空目录下进行
$ cd blog  #进入blog目录
$ npm install  #它会根据package.json依赖配置文件自动下载安装所需要的依赖模块node_modules
$ hexo generate  #生成静态文件, 缩写 $ hexo g
$ hexo server  #开启本地服务, 此时通过 http://localhost:4000 就可以访问默认样式的博客, 缩写$ hexo s
</code></pre>
<h4 id="小小的Debug"><a href="#小小的Debug" class="headerlink" title="小小的Debug"></a>小小的Debug</h4><p>安装时，显示在resolveNewModule步骤耗时很久，不知道是卡住还是这个步骤本就耗费时间。<br>Google找到Hexo的官方说明文档(<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>)，其中提到安装只需要几分钟，并且这个几分钟可能包含前述的Git和Node.js的准备。因此意识到安装出现问题，直接停下此次安装并重新运行命令。<br>出现问题的原因可能是安装的同时在下载一个较大的文件，无论是内存占用还是网络占用都达到一定程度，使得Hexo的安装受到影响。二次运行命令行时，下载已经结束，只用时51s就完成安装。<br>多翻了几个教程，很多教程都有提到新建文件夹Hexo，在这个目录下安装Hexo。因此卸载Hexo，在目标位置建立文件夹重装。卸载命令：  </p>
<pre><code>$ npm uninstall hexo-cli -g
</code></pre>
<p>这次安装同样比较顺利，很快就完成。<br>实际上，如果在安装前没有建立文件夹，只需在安装成功后建立一个新目录，后续步骤在这个空目录下进行即可。上述uninstall步骤是因为比较心急，直接推翻重来，但没有必要。</p>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><h3 id="git初始配置"><a href="#git初始配置" class="headerlink" title="git初始配置"></a>git初始配置</h3><p>Git安装完成后确认是否完成基本部署，用户名和邮箱设置是否完成。  </p>
<pre><code>$ git config --global user.name &quot;YOUR NAME&quot;  #设置用户名称
$ git config --global user.email &quot;YOUR EMAIL&quot;  #设置邮箱地址
</code></pre>
<h3 id="生成SSH-key公钥"><a href="#生成SSH-key公钥" class="headerlink" title="生成SSH key公钥"></a>生成SSH key公钥</h3><p>查看当前用户的目录下是否存在.ssh目录，如果存在进入到此目录下检查是否存在id_rsa和id_rsa.pub两个文件，这两个文件分别对应的是公钥和私钥，如果存在直接跳过此步，否则输入下面的命令：  </p>
<pre><code>$ ssh-keygen -t rsa -C “your_github_email”
# -t type:指定你要生成的密钥类型
# -C commit:提供一个新的注释  
</code></pre>
<p>然后一路回车，直到生成一个矩形的图案为止。记下生成的这串字符，这就是后面需要给GitHub配置的公钥。</p>
<h3 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h3><p>打开官网用邮箱一步步注册即可，仅有的两个可能遇到的问题:</p>
<ul>
<li>没想好用户名</li>
<li>确认注册的邮件因为有链接可能会被当作垃圾邮件。</li>
</ul>
<h3 id="配置GitHub中的公钥"><a href="#配置GitHub中的公钥" class="headerlink" title="配置GitHub中的公钥"></a>配置GitHub中的公钥</h3><p>在GitHub账号设置中找到添加SSH key的地方，即<br>Settings -&gt; SSH and GPG keys -&gt; New SSH key<br>将前述步骤中生成的公钥贴在此处  </p>
<h3 id="创建仓库-repository"><a href="#创建仓库-repository" class="headerlink" title="创建仓库(repository)"></a>创建仓库(repository)</h3><p>单机右上角(用户头像旁边)的“+”号即可创建New repository，会出现如图所示界面。<br>Owner处为用户名，后面的Repository name需要严格按照username.github.io填写。这样才能保证生成的是GitHub Pages页面，而不是其它代码库。  </p>
<h3 id="GitHub-Pages-1"><a href="#GitHub-Pages-1" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>创建成功后会自动进入该repository，进入setting找到Pages，进入后即可看到GitHub Pages界面。<br>这一步骤可能需要一些时间，耐心等待，一般几分钟就会显示站点发布成功。</p>
<h4 id="小小的debug"><a href="#小小的debug" class="headerlink" title="小小的debug"></a>小小的debug</h4><p>第一次走到这一步时，此处有一句提醒，由于该GitHub仓库是空的，所以无法创建GitHub Pages站点。解决方式： </p>
<ul>
<li>可自己创建一个README文件</li>
<li>粗暴删库重来，建库时选择生成默认README文件  </li>
</ul>
<h2 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h2><h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><p>在博客根目录下运行命令  </p>
<pre><code>$ npm install hexo-deployer-git –save
</code></pre>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>_config.yml是整个博客的配置文件，每项配置参数在Hexo官方文档可找到详细介绍。<br>使用git能将本地博客文件夹关联到GitHub的远程仓库，并把本地文件push到对应的仓库中。Hexo提供了一种更简便地方式，只需要在_config.yml中作相应的配置，通过命令行命令就可以很方便地把静态文件部署到对应的仓库中。<br>找到根目录中的_config.yml博客配置文件，在deployment配置项下设置如下参数：  </p>
<pre><code>deploy:  
    type: git  
    repo: git@github.com:yourname/yourname.github.io.git  
    branch: master  
</code></pre>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code>$ hexo generate #生成本地静态文件，可缩写为hexo g
$ hexo deploy   #部署，可缩写为hexo d
</code></pre>
<p>这时回到GitHub仓库, 可以看到网站的静态文件已经上传。</p>
<h4 id="小小的Debug-1"><a href="#小小的Debug-1" class="headerlink" title="小小的Debug"></a>小小的Debug</h4><p>部署没有报错，但网站没有更新<br>原因：GitHub Pages默认是从main生成页面，但本地设置部署参数是branch一项中填写的是master<br>Debug：修改该repository设置中pages的source一项或将前面提到的修改博客配置文件的branch参数为main</p>
<h3 id="一些有用的命令"><a href="#一些有用的命令" class="headerlink" title="一些有用的命令"></a>一些有用的命令</h3><pre><code>hexo clean = hexo c #清除本地缓存，也就是清除public/文件夹和db.json文件
hexo generate = hexo g #将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件
hexo server = hexo s #开启本地调试模式
hexo deploy = hexo d #将本地资源部署到GithubPages
</code></pre>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>Hexo的官网上即可找到许多可用主题，或搜索Hexo theme也可以找到。官网中列出的主题直达：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>找主题除了符合自己的审美之外，也要注意该主题是否一直有人维护。较长时间无人维护的主题可能由于版本问题无法顺利安装使用。</p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>本博客选择的主题是Next，安装步骤如下：<br>将主题clone到theme文件夹下</p>
<pre><code>$ cd blog
$ git clone https://github.com/next-theme/hexo-theme-next themes/next
</code></pre>
<p>然后在hexo配置文件中修改themes为next</p>
<pre><code>themes: next
</code></pre>
<h3 id="一些小改动"><a href="#一些小改动" class="headerlink" title="一些小改动"></a>一些小改动</h3><p>根据next的说明文件，可以在该主题的配置文件中对细节进行修改。<br>对博客名、描述以及作者等的修改在根目录的配置文件中进行。</p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Building</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>在文章中插入图片的各种方式</title>
    <url>/2021/10/19/imginblog/</url>
    <content><![CDATA[<center>终于还是没能避免想要在文章中用到图片，所以有了本文记录在Hexo博客中插入图片的各种方式</center>  
<span id="more"></span>  

<h2 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件<code>hexo-asset-image</code></p>
<pre><code>npm install hexo-asset-image --save
</code></pre>
<p>安装成功后，打开<code>/node_modules/hexo-asset-image/index.js</code>，替换成下列内容：</p>
<pre><code>&#39;use strict&#39;;
var cheerio = require(&#39;cheerio&#39;);

// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string
function getPosition(str, m, i) &#123;
return str.split(m, i).join(m).length;
&#125;

var version = String(hexo.version).split(&#39;.&#39;);
hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;
var config = hexo.config;
if(config.post_asset_folder)&#123;
    var link = data.permalink;
if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)
    var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;
else
    var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;
// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.
var endPos = link.lastIndexOf(&#39;/&#39;) + 1;
    link = link.substring(beginPos, endPos);
var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];
for(var i = 0; i &lt; toprocess.length; i++)&#123;
var key = toprocess[i];

var $ = cheerio.load(data[key], &#123;
    ignoreWhitespace: false,
    xmlMode: false,
    lowerCaseTags: false,
    decodeEntities: false
&#125;);

$(&#39;img&#39;).each(function()&#123;
if ($(this).attr(&#39;src&#39;))&#123;
// For windows style path, we replace &#39;\&#39; to &#39;/&#39;.
var src = $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;/&#39;);
if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;
    !/^\s*\//.test(src)) &#123;
    // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.
    // In addition, to support multi-level local directory.
    var linkArray = link.split(&#39;/&#39;).filter(function(elem)&#123;
    return elem != &#39;&#39;;
    &#125;);
    var srcArray = src.split(&#39;/&#39;).filter(function(elem)&#123;
    return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;
    &#125;);
    if(srcArray.length &gt; 1)
    srcArray.shift();
    src = srcArray.join(&#39;/&#39;);
    $(this).attr(&#39;src&#39;, config.root + link + src);
    console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);
&#125;
&#125;else&#123;
console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);
console.info&amp;&amp;console.info($(this));
    &#125;
&#125;);
data[key] = $.html();
    &#125;
&#125;
&#125;);
</code></pre>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当整个博客图片内容较少时，可将所有的图片都放在<code>source/images</code>文件夹下，通过<code>markdown</code>语法访问。  </p>
<pre><code>![](/images/img1.png)
</code></pre>
<p>对于图片较少切命名清晰的情况，这种方式存放图片足够。</p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>除了将图片存放在<code>source/images</code>文件夹下，还可以将图片存放在文章自己的目录中。文章目录可通过修改配置文件生成：  </p>
<pre><code>post_asset_folder: true  
</code></pre>
<p>将配置文件中<code>post_asset_folder</code>修改为<code>true</code>后，执行命令</p>
<pre><code>hexo new post newblog
</code></pre>
<p>会在<code>source/_posts</code>生成<code>newblog.md</code>和同名文件夹<code>newblog</code>。将图片存在该同名文件夹中，即可通过相对路径的方式在文章中添加图片。</p>
<pre><code>![](img.png)
</code></pre>
<p>这一方法能够在文章中显示图片，但无法在首页正常显示图片，如需在首页显示图片可使用如下方式：</p>
<pre><code>&#123;% asset_img img.png This is an image %&#125;
</code></pre>
<p>当图片内容较多，使用相对路径存放图片的方式更易于整理。</p>
<h4 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h4><p>如遇到修改配置文件后运行<code>hexo new newblog</code>命令无法正常建立一个同名文件夹，可以手动在<code>_POST</code>目录下建立一个同名文件夹，仍能够达到同样的效果。<br>实际上，md文件也可以手动新建。根据使用者的习惯，怎么新建md文件和同名文件夹都是可以的。<br>平时写文章不常用到图片，也可以使用手动建立同名文件夹的方式。  </p>
<h2 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h2><p>将图片上传到一些CDN服务中并使用对应的url地址引用图片也是一个很好的方式。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a><br>[2] <a href="https://fuhailin.github.io/Hexo-images/">在Hexo博客中插入图片的各种方式</a><br>[3] <a href="https://www.cxyzjd.com/article/m0_43401436/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a><br>[4] <a href="http://sdman.tech/2019/07/23/%E8%A7%A3%E5%86%B3Hexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/">解决 Hexo 框架博客图片不显示的问题</a></p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Writing</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>长毛象使用指南</title>
    <url>/2021/09/21/mstdn/</url>
    <content><![CDATA[<center>不少朋友被我安利到长毛象(mastodon)玩耍，本着对他们负责的态度，写下这篇长毛象使用指南。</center>
<span id="more"></span>

<h2 id="什么是mastodon"><a href="#什么是mastodon" class="headerlink" title="什么是mastodon"></a>什么是mastodon</h2><p>Mastodon(长毛象)是一个开源、去中心化的社交平台。简单来说，这里没有屏蔽词，没有限流，没有铺天盖地的营销号，没有Doctor看了都想重启宇宙的混乱时间线，只是一个纯粹的社交平台。长毛象将内容、社交网络交还给用户，更加尊重用户而不是平台“霸权”。<br><strong>如果将联邦宇宙(Fediverse)看做一个宇宙，那么每一个长毛象站点(Mastodon Society)就像一颗颗星球。</strong> 也就是说，你可以选择任何一颗星球定居，哪怕只是居住着一个人，只要它与宇宙相通，那么你就可以联系到宇宙中任何一个人而不会孤单。(摘自pullopen对长毛象的介绍：<a href="https://pullopenbluebox.wordpress.com/2020/06/30/mastodon-introduction/">长毛象（Mastodon）：更尊重用户的社交平台</a> )</p>
<h2 id="如何在mastodon拥有一个账号"><a href="#如何在mastodon拥有一个账号" class="headerlink" title="如何在mastodon拥有一个账号"></a>如何在mastodon拥有一个账号</h2><h3 id="选择站点"><a href="#选择站点" class="headerlink" title="选择站点"></a>选择站点</h3><p>长毛象有各种各样的站点(或称实例)，如二次元相关站、LGBTQ站、艺术类站，或者按照语言划分的小语种站点等等。可以在官网列出的站点列表(<a href="https://joinmastodon.org/communities">https://joinmastodon.org/communities</a>)里找到一个喜欢又适合的站点。<br>一开始使用建议在一些大型的国际站点注册，限制较少，每天都有很多世界各地的人在时间线上灌水，如</p>
<ul>
<li><a href="https://mastodon.social/">https://mastodon.social</a></li>
<li><a href="https://mastodon.online/">https://mastodon.online</a></li>
<li><a href="https://mstdn.social/">https://mstdn.social</a>  </li>
</ul>
<p>使用一段时间，对各项操作都熟悉之后，可进一步选择更适合自己的小站点注册并迁移账号，或者继续呆在国际站点也无妨。<br>也可以在中文站点，或者中文用户较多的站点注册。这样在查看local timeline(本地轴)时都是中文，方便遇到志同道合的朋友。但无论在哪个站点注册，都建议阅读过<strong>服务器规则</strong>和<strong>服务条款</strong>后再进行，这两项通常都放在注册页面。<br>熟悉长毛象后，发现没有一个站点完全符合自己的想法，也可以自建站加入长毛象宇宙。搭建长毛象站点有很多简单易上手的教程可供参考，即使是计算机小白也能拥有属于自己的站点。可参考的教程：</p>
<ul>
<li><a href="https://docs.joinmastodon.org/zh-cn/admin/prerequisites/">官方建站文档</a></li>
<li><a href="https://www.notion.so/Mastodon-042a05ee29a048df8b2c1afd49e4c49b">长毛象（Mastodon）社区搭建详解</a></li>
<li><a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/07/19/How-to-build-a-mastodon-instance.html">技术小白如何搭建Mastodon实例</a></li>
<li><a href="https://morikka.me/blog/mastodon-personal-instance/">长毛象个人向建站</a></li>
</ul>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>只要在一个站点注册，就可以连上整个长毛象宇宙，看到所有在用户和他们公开可见的嘟文，所以只需选择一个合适的站点注册账号即可。但由于站点服务器大多在中国境外，有被墙掉的风险，很多人会选择在多个站点注册账号，避免一个站点被GFW盯上ban掉就难以连上长毛象宇宙。<br>邮箱是各站点注册的必须品，注册成功后也可以更改。建议使用gmail、protonmail等邮箱服务，避免使用qq邮箱一类能直接指向使用者的邮箱。一些站点还需要填写入站申请或入站理由等以便站长和管理员审核注册人，通过审核之后便可成功注册，在长毛象宇宙自由玩耍。</p>
<h2 id="如何使用mastodon"><a href="#如何使用mastodon" class="headerlink" title="如何使用mastodon"></a>如何使用mastodon</h2><h3 id="Timeline-时间轴"><a href="#Timeline-时间轴" class="headerlink" title="Timeline(时间轴)"></a>Timeline(时间轴)</h3><p>Timeline简称为TL，完全按照时间来排列嘟文，不必担心出现时间线混乱、只给你看热度高的嘟文或塞给你不想看的广告、推广。<br>一般情况下，时间线有三种：</p>
<ul>
<li><strong>Home</strong> timeline，简称HTL，即首页。这是账号持有人自行关注而产生的时间线，能看到public、unlist、followers-only的嘟文(包括回复)以及提到你的direct message。</li>
<li><strong>Local</strong> timeline，简称LTL，即本站(地)轴。这是账号所在站点的时间线，只有该站点的公开嘟文会出现在这里。</li>
<li><strong>Federate</strong> timeline，简称FTL，即跨站轴。这是无论站点、所有账号嘟出的public内容共同组成的时间轴，能够看到世界各地的人都在这里发出自己的嘟嘟。</li>
</ul>
<p>通过设置<code>preferences(首选项)-&gt;other(其它)-&gt;PUBLIC TIMELINES-Filter languages(公共时间轴-语言过滤)</code>，可过滤时间线上的语言，只留下自己想看的语言。但这个过滤并不完全，公共轴或本站轴仍会出现一些应该被过滤掉的语言。 </p>
<h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul>
<li><p>发嘟  </p>
<ul>
<li>可见范围<br>发嘟可选择四种可见范围：public(公开)，unlist(公开，但不出现在公共时间轴)，followers-only(仅关注者可见)，direct message(私信，也可用作发仅自己可见的嘟文)。在设置中可以选择默认发嘟可见范围。</li>
<li>cw折叠功能<br>一些不想被直接看到或者含有可能令人不适内容的嘟文推荐使用cw。点击发嘟窗口下方的cw就会出现一个新的小窗口，在这个新的小窗口填上内容提示信息，在发嘟主要窗口填写主要内容。<del>这个功能也很好地被用来讲冷笑话</del>  </li>
<li>标记敏感内容<br>如果发的嘟文/图片含有not safe for work(NSFW，包括色情、暴力、血腥等)的内容，需要在发嘟时将图片标记为敏感信息，且善用cw折叠功能。</li>
</ul>
</li>
<li><p>回复<br>左下角箭头是回复功能，回复也可以设置不同的可见范围。在此处如果设置followers-only，被回复者即使没有关注你，也可以看到。回复的嘟嘟仅会出现在同时关注对话双方的账号首页时间线(Home Timeline)。这样尽最大可能避免参与对话者以外的人的打扰，使对话双方处于平等地位，不会出现因一方粉丝过多看到回复一拥而上的现象。各个时间轴设置(一般在主区域右上角)中可设置该时间轴不显示回复类嘟文。</p>
</li>
<li><p>转发<br>长毛象的转发是仅转发，不能带文字。这样很好的避免了类似微博上转发挂人形成骂战的现象。在账号设置中选择<code>在时间轴中合并转嘟</code>，以避免一篇嘟文被太多人转发刷屏时间轴的情况。各个时间轴设置(一般在主区域右上角)中可设置该时间轴不显示转发类嘟文，公共轴一般默认不显示转发。</p>
</li>
<li><p>喜欢<br>这里的⭐是favourite的意思，类似点赞功能。点赞代表赞同、安慰还是这里有个言论我mark一下就看使用者自己的想法，但通常来说都是<strong>赞</strong>！  </p>
</li>
<li><p>书签<br>bookmark是书签，或者称为收藏功能，这个功能与大多数平台相似，不再赘述。</p>
</li>
</ul>
<h3 id="头像、昵称、profile、标签"><a href="#头像、昵称、profile、标签" class="headerlink" title="头像、昵称、profile、标签"></a>头像、昵称、profile、标签</h3><p>一些站点固定期限内没有头像、昵称和嘟文的“三无账号”会被清除收回，注意阅读站点规则避免注册之后账号被回收。既然已经决定抛弃微博等在用户时间线上搞动作的平台，就不要只是注册个账号放着，用起来！</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul>
<li><p>锁嘟<br>锁定账号(选项在个人资料页面)，需要手动审核所有关注请求。即每个想要关注你账号的人需要先发送关注请求，你通过之后方可关注你的账号以及看到你的followers-only的嘟文。与instgram的锁账号不同，即使挂上小锁其他人仍能看到公开可见的嘟文。如果有较多敏感嘟文不想随意被人看到，可定期删除或选择followers-only、direct message这两种可见范围。</p>
</li>
<li><p>语言<br>通过<code>Preferences(首选项)-&gt;Appearance(外观)-&gt;Interface language(界面语言)</code>设置平台语言。由于各语种都是志愿者翻译，可能会出现错误或词不达意，但基本不影响使用。</p>
</li>
<li><p>过滤器<br>这里的过滤器是真的过滤掉包含关键字的嘟文，但可能会在原本应该是一条嘟文的地方出现<code>filtered</code>的提醒。过滤器可以设置失效时间、作用场景等。</p>
</li>
<li><p>邮件通知<br>Preferences(首选项) -&gt; Notifications(通知)里的邮件提醒建议关掉，避免发送过多邮件给站长的邮件服务造成不必要的负担。</p>
</li>
<li><p>其它<br>界面语言设置为惯用语言后，其它设置可自行探索。</p>
</li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>Mastodon故意弱化了搜索功能，避免形成“广场”，从而导致有人随便搜索一个关键词便前来抬杠或骂人的行为。但这也在一定程度上造成使用者的不便，比如明明有印象一条嘟嘟，但根本找不到，所以需要使用者自己多注意收藏有用的信息。有些站点开了全文搜索，会让搜索结果好一些，如自己的嘟文或转发、点赞过的嘟文能够搜索，但无法实现真正的“搜索”。 </p>
<h3 id="block-mute"><a href="#block-mute" class="headerlink" title="block / mute"></a>block / mute</h3><p>block即拉黑/屏蔽。拉黑后，该账号无法与你互动、关注，嘟文不会出现在你的时间线。<br>mute即隐藏。隐藏后，该账号的嘟文不会出现在你的时间线，但仍可与你互动、关注，而你不会收到任何提醒。</p>
<h3 id="迁移账号"><a href="#迁移账号" class="headerlink" title="迁移账号"></a>迁移账号</h3><p>长毛象的一大优点就是站点多，且类型丰富。如果看上了别的站点，可以在新站点注册账号后将账号迁移过去。迁移账号可以自动将followers/following转移到新账号，但无法迁移旧帐号的嘟文。</p>
<h3 id="账号备份"><a href="#账号备份" class="headerlink" title="账号备份"></a>账号备份</h3><p>长毛象自带的备份功能可以备份follower列表、following列表、mute列表、block列表等。如果想要备份嘟文，可以使用象友提供的<a href="https://github.com/slashyn/mastodon-archive-viewer-modified">备份插件</a>。<br>由于各个站点的维护仅依赖站长和可能有的站点管理员，所以可能会有不稳定、服务器出问题等状况出现，有时整个站点也会关闭不再运行，及时备份账号内容是个好习惯。</p>
<h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>长毛象作为一个去中心化的平台，最佳访问方式是直接浏览器访问，如Chrome、Firefox、safari等。这些浏览器可以在手机主屏幕创建快捷方式，在手机桌面单独形成一个图标和有一个app没有太大差别。<br>如果仍需要一个app，可选择的有：</p>
<ul>
<li><p><strong>Android</strong>: Tusky, Subway Tooter, Fedilab(付费)</p>
</li>
<li><p><strong>iOS</strong>: Metatext, Mercury, iMast, Amaroq, Mast(付费), Toot!(付费)  </p>
</li>
<li><p><strong>tooot</strong>：对于中文用户，推荐使用tooot。这是一个专注于中文社区的简洁、开源长毛象手机客户端，跨平台支持iOS和Android。 </p>
</li>
<li><p><strong>其它</strong>：其它平台应用推荐可查看<a href="https://joinmastodon.org/apps">官网应用推荐</a>。  </p>
</li>
</ul>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>作为一个公共社交网络，这里也可以带话题(tag)发嘟。格式和Instagram一样，只需要一个<code>#</code>，如<code>#tag</code>。<br>长毛象已经有很多有趣或有用的tag，如<code>#长毛象中文使用指南</code>、<code>#长毛象安利交换大会</code>、<code>#资源分享</code>、<code>#菜谱</code>，还有季节性的赏花、赏月tag。也可以创建自己的专属tag，把某类嘟文存在这个tag下，方便自己查看。</p>
<h3 id="一些好玩的账号"><a href="#一些好玩的账号" class="headerlink" title="一些好玩的账号"></a>一些好玩的账号</h3><ul>
<li><p>骰寶機<br>吃喝玩乐都可以找它！想不到晚饭吃什么，发嘟@骰宝问吃什么，不出一分钟就会回复一种食物。问它喝什么同理。还有好玩又有趣的答案之书和对不对判断。具体玩法可查看骰宝账号主页了解。</p>
</li>
<li><p>妙仙包<br>想知道心中之事的结果？找大师求签、塔罗牌都能给你一个奇妙的答案。选择困难症？找包包真普选，轻松治愈选择困难。心中有愿还可对着大师许愿，有机会被大师选中实现。具体玩法查看妙仙包账号主页了解。</p>
</li>
<li><p>sci咖啡屋<br>这里可以点单饮品、套餐，但一定要吃完不可浪费。累了还可以在这里撸猫，猫猫送上缓解疲惫。具体玩法查看sci咖啡屋账号主页了解。</p>
</li>
<li><p>Mature[マツレ]<br>Mature是长毛象上最早的科学期刊之一，也是长毛象最权威及最有名望的学术期刊之一。每周最重要、最前沿的研究结果是在「Mature」中以论文导读的形式发表的。欢迎订阅，支持投稿。投稿方法详见Mature账号主页。</p>
</li>
</ul>
<p>以上有趣账号可通过搜索名称获得，在此不提供具体账号以免给站点造成麻烦。</p>
<h2 id="More-than-Mastodon"><a href="#More-than-Mastodon" class="headerlink" title="More than Mastodon"></a>More than Mastodon</h2><p>其实mastodon只是这个宇宙中的一部分，还有Misskey、pleroma、funkwhale、peertube等和mastodon类似的社交平台共同组成整个联邦宇宙。<br>何必拘泥于处处受限的一隅，这里有更广阔的宇宙等你。<br>Enjoy yourself！</p>
]]></content>
      <categories>
        <category>Mastodon</category>
      </categories>
      <tags>
        <tag>Mastodon</tag>
        <tag>UserGuide</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Markdown写博客</title>
    <url>/2021/09/16/writenewblog/</url>
    <content><![CDATA[<center>创建、发布新文章；用vscode + markdown编辑文章；给文章添加分类和标签。</center>
<span id="more"></span>

<h2 id="新建文章-create-a-post"><a href="#新建文章-create-a-post" class="headerlink" title="新建文章 create a post"></a>新建文章 create a post</h2><p>在博客目录运行命令：</p>
<pre><code>$ hexo new [layout] title
# layout有三种:post, draft, page, 默认是post，可以在博客配置文件中更改default_layout来更改默认设置
# Hexo会根据scaffolds文件夹内相对应的文件来建立md文件
# 当创建不同布局的md文件时，它们会存储在不同路径

$ hexo new &quot;My New Post&quot;
#新建一个名为&quot;My New Post&quot;的md文件
</code></pre>
<p>后续编辑这个文件即可。</p>
<h2 id="vscode-markdown写文章"><a href="#vscode-markdown写文章" class="headerlink" title="vscode + markdown写文章"></a>vscode + markdown写文章</h2><p>可按照以下步骤编辑一遍博客文章：</p>
<ol>
<li>从<a href="https://code.visualstudio.com/">官网</a>下载vscode，并安装。  </li>
<li>安装markdown插件：<ul>
<li>Markdown All in One: 组合包，把最常用的Markdown优化全部装好</li>
<li>Markdown Preview Github Styling: 在本地就能预览Markdown文件最终在Github Pages中显示的效果</li>
</ul>
</li>
<li>学习基本的markdown语法，利用vscode编辑文章。同时，利用”Open Preview to the Side”按键或快捷键可同时预览文章</li>
<li>写完这篇文章</li>
</ol>
<h2 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h2><h3 id="生成categories页并修改type属性"><a href="#生成categories页并修改type属性" class="headerlink" title="生成categories页并修改type属性"></a>生成categories页并修改type属性</h3><p>在博客目录运行命令行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>运行成功后会提示：</p>
<pre><code>INFO  Created: ~/Documents/blog/source/categories/index.md
</code></pre>
<p>根据所给路径找到index.md文件，在文件的框架内添加一行：</p>
<pre><code>type: &quot;categories&quot;
</code></pre>
<h3 id="给文章添加categories"><a href="#给文章添加categories" class="headerlink" title="给文章添加categories"></a>给文章添加categories</h3><p>在文章头的<code>categories:</code>后以<code>-</code>为标志添加标签，如本文的标签：</p>
<pre><code>categories:
- Blog #注意“-”后一定要加空格
</code></pre>
<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><h3 id="生成tag页并修改type属性"><a href="#生成tag页并修改type属性" class="headerlink" title="生成tag页并修改type属性"></a>生成tag页并修改type属性</h3><p>在博客目录运行命令行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>运行成功后会提示：</p>
<pre><code>INFO  Created: ~/Documents/blog/source/tags/index.md
</code></pre>
<p>根据所给路径找到index.md文件，在文件的框架内添加一行：</p>
<pre><code>type: &quot;tags&quot;
</code></pre>
<h3 id="给文章添加tag"><a href="#给文章添加tag" class="headerlink" title="给文章添加tag"></a>给文章添加tag</h3><p>在文章头的<code>tags:</code>后以<code>-</code>为标志添加标签，如本文的标签：</p>
<pre><code>tags: 
- Blog #注意“-”后一定要加空格
- Hexo
- Markdown
- vscode
</code></pre>
<h2 id="文章的发布"><a href="#文章的发布" class="headerlink" title="文章的发布"></a>文章的发布</h2><p>在博客目录运行命令：</p>
<pre><code>$ hexo generate
$ hexo server  # 本地预查看
$ hexo deploy  # 部署到GitHub Pages

# 此步骤报错可先检查文件头等文章各部分是否缺少空格
</code></pre>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/156915260">Hexo博客写文章及基本操作</a></li>
<li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略-添加分类及标签</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56943330">[Markdown] 使用vscode开始Markdown写作之旅</a></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Writing</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Markdown</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Batch Effects Matter and Avoid Them in Omics Data</title>
    <url>/2021/10/29/BatchEffect/</url>
    <content><![CDATA[<center>文献阅读：关于批次效应的3W1H——什么是批次效应、什么情况下会出现批次效应、为什么要关注批次效应与如何处理批次效应</center>
<span id="more"></span>

<h2 id="什么是批次效应"><a href="#什么是批次效应" class="headerlink" title="什么是批次效应"></a>什么是批次效应</h2><p><strong>批次效应</strong>是指实验子组在不同的实验条件之下具有与研究中的生物学或其它科学变量无关的性质不同的行为，即实验中测量值之间由于技术因素造成的系统性差异。</p>
<br>

<h2 id="什么情况下会有批次效应"><a href="#什么情况下会有批次效应" class="headerlink" title="什么情况下会有批次效应"></a>什么情况下会有批次效应</h2><p>批次效应在生物学实验中广泛存在，无论是microarray expression profiling还是mass spectrometry产生的数据，都观察到明显的批次效应。具体到研究疾病的差异基因/蛋白或变异数据(如拷贝数变异)的研究中同样观察到明显批次效应。<br>造成批次效应的因素有很多，试剂批次不同、实验时间不同、仪器状态变化、实验员不同都可能造成批次效应。其中一些批次效应能够通过规范化实验操作、更好的实验设计避免；另一些则需要通过对所得数据进行处理才能够消除。<br>在Leek等人对已公开数据批次效应的研究发现，已公开的数据中存在明显批次效应。且在许多实验条件和技术中，技术性因素比生物性因素对实验结果更具影响力。当批次效应发生时，常常与生物性因素混淆，导致下游研究结果不准确。  </p>
<br>

<h2 id="为什么要关注批次效应"><a href="#为什么要关注批次效应" class="headerlink" title="为什么要关注批次效应"></a>为什么要关注批次效应</h2><p>当批次效应发生时，可能会</p>
<ul>
<li>增加变化(variability)而掩盖真正生物学信号，导致得到错误的生物学或临床结论  </li>
<li>与特征信号混在一起，导致下游分类器构建困难  </li>
<li>阻碍生物学上重要亚型的发现或与亚型混淆难以区分  </li>
<li>导致实验资源分配不当，结果缺乏可重复性  </li>
</ul>
<p>因此，消除批次效应对得到准确、可重复性高的结论非常重要。</p>
<br>

<h2 id="如何避免或处理批次效应"><a href="#如何避免或处理批次效应" class="headerlink" title="如何避免或处理批次效应"></a>如何避免或处理批次效应</h2><h3 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h3><p>避免出现批次效应的首要步骤是合理的实验设计。高通量的实验应在实验设计时考虑到批次效应，在实验过程中尽可能避免批次效应的出现。实验分组时也需保证平衡性(balance)，避免非研究目标的生物学因素对实验结果造成影响，进而和批次效应混杂，导致数据难以处理。  </p>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>优秀的实验设计是降低批次效应的基础，在此基础之上处理批次效应主要有以下两个步骤：</p>
<ol>
<li>识别并量化数据中潜在的批次效应，包括人为因素  </li>
<li>使用已知或找到的人为因素调整数据以适应下游分析</li>
</ol>
<h4 id="识别并量化批次效应"><a href="#识别并量化批次效应" class="headerlink" title="识别并量化批次效应"></a>识别并量化批次效应</h4><p>识别和量化批次效应主要通过主成分分析(Principal Component Analysis, PCA)或其它数据可视化工具如聚类、多维数据标化等。<br>如果数据处理结果中出现：  </p>
<ul>
<li>样本按处理组或时间聚类</li>
<li>大量特征与处理组或时间高度相关</li>
<li>主成分与批次处理组或时间相关联  </li>
</ul>
<p>则表明数据中极大可能存在批次效应，必须在下游数据处理前考虑到批次效应的影响。</p>
<h4 id="处理批次效应"><a href="#处理批次效应" class="headerlink" title="处理批次效应"></a>处理批次效应</h4><p>根据其算法思想可将消除批次效应的方法分为如下几个大类：  </p>
<ul>
<li><strong>简单线性模型(Simple Linear Models)</strong>: Mean-scaling, zero-centering  </li>
<li><strong>经验贝叶斯方法(Empirical Bayes)</strong>: ComBat  </li>
<li><strong>因子分析(Factor-based analysis)</strong>: Surrogate Variable Analysis (SVA), Removed unwanted variation (RUV)  </li>
<li><strong>深度学习(Deep Learning)</strong>: NormAE</li>
</ul>
<p>其中，前两种消除批次效应的方法需要已知造成批次效应的因素，如实验时间等。  </p>
<p>根据先验知识、实验数据规模、特征空间大小、研究目的等因素，可挑选不同的处理批次效应的方法：</p>
<ul>
<li>大数据；特征空间有限；有限的生物异质性；批次效应或分类影响因子已知；目标是简单分析：<strong>Two-way ANOVA</strong>  </li>
<li>小数据；特征空间有限；有限的生物异质性；批次效应或类影响因子已知；目标是去除批次效应：<strong>ComBat</strong>  </li>
<li>中/大型数据集；大特征空间；存在生物异质性；类因子已知，批次效应影响因素不必已知；目标是移除批次效应且确定批次效应影响因素：<strong>SVA</strong>, <strong>RUV</strong>  </li>
<li>中/大型数据集；大特征空间；存在生物异质性；批次效应或分类影响因子都不必已知；目标是移除批次效应且确定批次效应影响因素但不需直到类因子：<strong>unsupervised methods (PCA)</strong>, <strong>RUV</strong></li>
</ul>
<p>算法补充：<br><img src="/2021/10/29/BatchEffect/Methods.png" alt="算法补充1"><br><img src="/2021/10/29/BatchEffect/Methods2.png" alt="算法补充2">  </p>
<h4 id="批次效应处理评估"><a href="#批次效应处理评估" class="headerlink" title="批次效应处理评估"></a>批次效应处理评估</h4><p>消除批次效应之后，通常会检查处理的效果。常用的方法有PCA、层次聚类等，检查数据是否有与批次相关联的偏移、聚类结果是否更符合生物学先验知识等。<br>评估方法小结：<br><img src="/2021/10/29/BatchEffect/Validation.png" alt="批次效应评估方法">  </p>
<br>

<h2 id="批次效应处理流程"><a href="#批次效应处理流程" class="headerlink" title="批次效应处理流程"></a>批次效应处理流程</h2><p>Jelena Čuklina等人针对批次效应的研究中提供了一个消除蛋白质数据批次效应的处理流程和一个包含所有处理步骤的R包——proBatch (<a href="https://www.bioconductor.org/packages/release/bioc/html/proBatch.html">Bioconductor</a>, <a href="https://hub.docker.com/r/digitalproteomes/probatch">Docker container</a>, <a href="https://github.com/symbioticMe/batch_effects_workflow_code">GitHub repository</a>都可获取该R包)  </p>
<h3 id="流程图总览"><a href="#流程图总览" class="headerlink" title="流程图总览"></a>流程图总览</h3><p><img src="/2021/10/29/BatchEffect/workflow.png" alt="批次效应处理流程图">  </p>
<ol>
<li>初步评估原始数据中是否存在批次效应  </li>
<li>归一化使数据集中所有数据在同一尺度  </li>
<li>归一化后数据评估，以确定数据是否需要进一步处理  </li>
<li>批次效应校正以纠正特征偏移  </li>
<li>质量控制测试：是否在保留有意义信号的同时减少了数据偏差  </li>
</ol>
<h3 id="Raw-Data-Matrix"><a href="#Raw-Data-Matrix" class="headerlink" title="Raw Data Matrix"></a>Raw Data Matrix</h3><p>在进行这一流程之前，应当先对数据进行预处理，如肽段识别、肽段定量、FDR筛选、log-transformed或variance stabilizing transformation。<br>虽然在ion fragment、peptides、protein层面都可以识别并处理批次效应，但因为这个过程改变了对蛋白质推断至关重要的特征丰度，最好针对ion fragment或peptides数据处理批次效应。且在处理过程中应包含尽可能多的数据以保证数据分布最接近真实情况。  </p>
<h3 id="Initial-Assessment"><a href="#Initial-Assessment" class="headerlink" title="Initial Assessment"></a>Initial Assessment</h3><p>这一步骤主要目的是确定数据的偏移程度并确定一个归一化方法。通常情况下，样本间intensity会有一定差异，调整这种差异有助于数据的比较，能够更好地识别出需要进一步处理的因素。主要方法有三种：</p>
<ol>
<li>按照质谱测量或技术批次的顺序绘制样品强度平均值或中值，评估每个批次中的质谱漂移或离散偏差  </li>
<li>箱线图，评估样本方差和异常值  </li>
<li>批次间与批次内样本相关性  </li>
</ol>
<p>通过上述步骤来检验</p>
<ul>
<li>数据分布是否具有一致性  </li>
<li>样本间的相关性  </li>
<li>如果有差异，这种差异是否与批次相关联  </li>
</ul>
<h3 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h3><p>归一化的目的就是将所有样本的数据处于同一尺度，使得跨样本数据能够互相比较。常用的归一化方法有quantile normalization、median normalization和z-transformation，应根据数据的异质性和数据分布情况选择合适的归一化方法。  </p>
<h4 id="数据的异质性"><a href="#数据的异质性" class="headerlink" title="数据的异质性"></a>数据的异质性</h4><ul>
<li><strong>数据相似程度高：</strong> quantile normalization  </li>
<li><strong>数据具有本质差异：</strong> HMM-assisted normalization  </li>
<li><strong>数据会有包含信息的异常值(outliers)：</strong> 选择能够保留异常值与总体数据关系的归一化方法  </li>
</ul>
<h4 id="样本丰度分布"><a href="#样本丰度分布" class="headerlink" title="样本丰度分布"></a>样本丰度分布</h4><ul>
<li>通常情况下，只需调整数据中位数或平均值  </li>
<li>如果出现方差差异较大，也需要将它们调整到同一尺度</li>
</ul>
<p>归一化步骤应尽可能简单直接，对数据的操作越少，越能够保留数据的真实情况。归一化后可通过diagnostic plots和quality control方法对数据进行评估。</p>
<h3 id="Diagnostics-of-normalized-data"><a href="#Diagnostics-of-normalized-data" class="headerlink" title="Diagnostics of normalized data"></a>Diagnostics of normalized data</h3><p>评估归一化后的数据以确定是否需要进一步的处理，主要方法为：</p>
<ul>
<li><strong>Hierarchical clustering：</strong>  将相似的样本分组为树状结构，观察聚类结果是否和批次相关  </li>
<li><strong>Principal Component Analysis(PCA):</strong> 观察主成分是否与批次相关联，对评估聚类依据是生物还是技术因素及检查重复组相似性十分有效  </li>
</ul>
<p>上述方法要求数据中没有缺失值，而蛋白质组数据通常含有缺失值。填补缺失值时应特别注意尽可能保留数据原有的分布，不能盲目填0或一个较小的随机数。<br>蛋白质组通常使用肽段数据检查是否存在与批次相关的偏移。如在DIA数据中加入iRT肽段用于数据特征校正。由于不同肽段对不同批次效应的response不同，有必要检查大量肽段以确定是否存在批次效应。通过检查肽段数据还能够确认跑样顺序是否对数据造成影响，是否有与顺序相关的变化趋势(trends)。<br>还可以用ion fragments的数据校正蛋白数据，但目前针对肽段的方法更加广泛。  </p>
<h3 id="Batch-effect-correction"><a href="#Batch-effect-correction" class="headerlink" title="Batch effect correction"></a>Batch effect correction</h3><p>归一化能够校准数据的全局，而批次效应校正主要针对特征峰和特征组。根据批次效应的形式，可将消除批次效应的方法分为两大类：</p>
<ul>
<li><strong>Continuous</strong><br>消除连续的批次效应主要通过拟合的方式，如LOESS fit，或使用其它连续算法。<br>在质谱大数据(hundreds of samples)中会出现信号漂移现象，这仍是一个亟待解决的问题。  </li>
<li><strong>Discrete</strong><br>消除离散的批次效应时常用mean and median centering。<br>基于贝叶斯模型的ComBat算法也能够用于处理蛋白质数据，但需要已知所有的批次效应影响因素。</li>
</ul>
<h3 id="Quality-control"><a href="#Quality-control" class="headerlink" title="Quality control"></a>Quality control</h3><p>质控步骤主要用于评估归一化和批次效应校正之后的数据质量，好的数据校正应做到消除偏移(negative control)和提升数据(positive control)两方面。  </p>
<ul>
<li><strong>消除偏移的标准</strong>  <ul>
<li>聚类或PCA后，同组数据聚集依据与批次无关，更多地受生物学因素影响  </li>
<li>肽段(或其他特征，如ion fragments)没有与批次相关的偏移  </li>
</ul>
</li>
<li><strong>提升数据</strong><ul>
<li>通常情况下，数据提升的标准为聚类结果更符合生物学先验知识，后续差异检验步骤能够识别出更多差异。但这种标准并不具有足够的客观性，尤其是后一个标准并不一定表明数据提升，还有可能是false positive  </li>
<li>交叉验证：差异表达蛋白或最佳分类特征蛋白列表高度重合。但这种方法依赖于数据集和特征空间的大小，当数据集较小，后一个蛋白列表本身不稳定，会对评估造成影响。在另一篇综述中强调应避免交叉验证来评估数据质量  </li>
<li>检查重复组间的方差：如果数据的归一化和消除批次效应步骤合理，重复组间的方差应降低  </li>
<li>样本间相关性：技术或生物学重复样本间的相关性应明显高于与其它样本的相关性  </li>
<li>距离矩阵：与上一方法的逻辑相似，但通过计算样本间距离来评估数据  </li>
<li>肽段间的相关性：来自同一蛋白的肽段具有正相关或高相关性，而来自不同蛋白或不相关的肽段间的相关性应接近于0  </li>
</ul>
</li>
</ul>
<br>

<h2 id="消除批次效应的方法-工具"><a href="#消除批次效应的方法-工具" class="headerlink" title="消除批次效应的方法/工具"></a>消除批次效应的方法/工具</h2><h3 id="ComBat"><a href="#ComBat" class="headerlink" title="ComBat"></a>ComBat</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>ComBat基于参数和非参数经验贝叶斯框架，用于调整具有批次效应的数据。该方法对小样本中的异常值具有健壮性，并且与大样本的现有方法相当。<br>以Microarray为研究对象。  </p>
<h4 id="经验贝叶斯框架使用基础"><a href="#经验贝叶斯框架使用基础" class="headerlink" title="经验贝叶斯框架使用基础"></a>经验贝叶斯框架使用基础</h4><ul>
<li>已经广泛用于大规模microarray数据：稳定具有极高或极低比率的基因的表达比，缩小所有其他基因的方差来稳定基因方差避免伪影的影响等  </li>
<li>已有批次效应处理方法(如SVD、DWD和L/S method)需要大批量数据，且不能兼容小批次数据的离群值  </li>
<li>对高位效数据组有较强的健壮性  </li>
<li>利用跨基因和跨样本的“借用信息”，以得到更好的估计或更稳定的结果  </li>
</ul>
<h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><ul>
<li>结合基因间常见的系统批次效应，假设导致批次效应的现象通常以相似的方式影响许多基因  </li>
<li>通过汇集信息(pooling information)来估计代表批次效应的L/S模型参数，在每个批次的基因中缩减(shrink)批次效应参数估计值，使之朝着批次效应估计值的总体平均值(跨基因)发展  </li>
<li>数据已被归一化，所有样本的基因表达值已被估计  </li>
</ul>
<h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><ol>
<li>Standardize the data  </li>
<li>EB batch effect parameter estimates using parametric empircal priors  </li>
<li>Adjust the data for batch effects  </li>
</ol>
<h3 id="QC-RLSC"><a href="#QC-RLSC" class="headerlink" title="QC-RLSC"></a>QC-RLSC</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>QC-RLSC(quality control-based robust LOESS signal correction)可用于信号校正和整合来自不同实验批次的数据。<br>以Metabolics数据为研究对象。  </p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>LOESS曲线拟合结合了经典的线性最小二乘法回归的简单性和非线性回归的灵活性。它通过对数据的局部子集进行简单的模型拟合来建立一个函数，逐点地描述数据中的确定性变化部分。不需要指定任何形式的全局函数来拟合数据的模型，而只需要拟合数据的片段。<br>对数据的每个子集进行拟合的局部多项式被限制为一阶或二阶(即局部线性或局部二阶)，并使用加权最小二乘法拟合(标准三立方权重函数)。<br>优化平滑参数(或称跨度)以获得更好的回归曲线。不使用过小的平滑参数以避免曲线受到随机误差的影响。<br>留一法交叉验证(leave-one-out cross validation)以避免过拟合。  </p>
<h4 id="关键步骤-1"><a href="#关键步骤-1" class="headerlink" title="关键步骤"></a>关键步骤</h4><ol>
<li>在实验结束、色谱解卷积后，使用QC-RLSC对数据进行标准化(normalize)</li>
<li>依据注入顺序，对质控数据进行LOESS拟合</li>
<li>对整个分析运行的校正曲线进行内插，并对该特征的总数据集进行标准化</li>
</ol>
<p>通过这些步骤，在一次分析中，峰响应的任何衰减都被最小化。</p>
<h3 id="ICA"><a href="#ICA" class="headerlink" title="ICA"></a>ICA</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>使用时空独立成分分析(spatio-temporal independent component analysis)对批次效应建模，并移除这些影响。<br>以microarray datasets为研究对象。  </p>
<h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>对整合的数据集进行因子分解(factorization)，移除与子数据集具有某种相关性的组件，以获得最终数据集。这一过程能够从数据中移除批次效应。<br>去除的成分是可以解释的，很容易检查它们是否与某些感兴趣的生物信息相关。<br>ICA被证明能更好地模拟不同的变异(variables)来源。  </p>
<h4 id="关键步骤-2"><a href="#关键步骤-2" class="headerlink" title="关键步骤"></a>关键步骤</h4><p>假设汇总的数据集是一个按样本划分的基因矩阵<em>X</em>，<em>X</em><sub>i,j</sub> 表明gene <em>i</em> 在样本 <em>j</em> 中的表达量。<br><img src="/2021/10/29/BatchEffect/ICAsteps.png" alt="ICA流程">  </p>
<h3 id="WaveICA"><a href="#WaveICA" class="headerlink" title="WaveICA"></a>WaveICA</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>WaveICA基于带有小波变换的独立成分分析，作为大规模代谢组学数据的阈值处理方法捕获并去除批次效应。<br>研究对象为Metabolics数据。  </p>
<h4 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h4><p>利用样品在注射顺序中的时间趋势，将原始数据分解为具有不同特征的多尺度数据，提取并去除多尺度数据中的批次效应信息，获得干净的数据。<br>在实际问题中DWT有局限性，WaveICA中使用的小波变换为Maximal overlap discrete wavelet transform (MODWT)。  </p>
<h4 id="关键步骤-3"><a href="#关键步骤-3" class="headerlink" title="关键步骤"></a>关键步骤</h4><p><img src="/2021/10/29/BatchEffect/WaveICA.png" alt="WaveICA流程">  </p>
<h3 id="NormAE"><a href="#NormAE" class="headerlink" title="NormAE"></a>NormAE</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>Normlization Autoencoder(NormAE)基于非线性自编码器和对抗性学习的新型深度学习模型。<br>研究对象为Metabolics数据。  </p>
<h4 id="基本原理-3"><a href="#基本原理-3" class="headerlink" title="基本原理"></a>基本原理</h4><p>将非线性自编码器和DNN结合，提高模型的非线性拟合能力，使得批次效应结果和其它因素影响结果分开，以在去除批次效应的同时保留更多生物学特征。<br>在AE模型的训练过程中，训练一个额外的分类器和排序器来对抗性正则化，潜在的特征被编码器提取出来，然后解码器在没有批次效应的情况下重建数据。  </p>
<h4 id="关键步骤-4"><a href="#关键步骤-4" class="headerlink" title="关键步骤"></a>关键步骤</h4><p>黑色实线和红色虚线分别表示反向传播算法的前向和后向计算步骤。蓝色虚线路径表示训练后的批量效应去除步骤。<br><img src="/2021/10/29/BatchEffect/NormAE.png" alt="NormAE原理图">  </p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Leek, Jeffrey T et al. <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3880143/"><strong>Tackling the widespread and critical impact of batch effects in high-throughput data.</strong></a> Nature reviews. Genetics, vol. 11,10 (2010): 733-9.<br>[2] Čuklina, Jelena et al. <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8447595/"><strong>Diagnostics and correction of batch effects in large-scale proteomic studies: a tutorial.</strong></a> Molecular systems biology, vol. 17,8 (2021): e10240.<br>[3] Zhou, Longjian et al. <a href="https://pubmed.ncbi.nlm.nih.gov/31611172/"><strong>Examining the practical limits of batch effect-correction algorithms: When should you care about batch effects?</strong></a>, Journal of Genetics and Genomics, Vol. 46, 9(2019): 433-443.<br>[4] Goh, Wilson Wen Bin et al. <a href="https://pubmed.ncbi.nlm.nih.gov/28351613/"><strong>Why Batch Effects Matter in Omics Data, and How to Avoid Them.</strong></a> Trends Biotechnol, Vol. 35, 6 (2017):498-507.<br>[5] Johnson, WE et al. <a href="https://academic.oup.com/biostatistics/article/8/1/118/252073/"><strong>Adjusting batch effects in microarray expression data using empirical Bayes methods.</strong></a> Biostatistics, Vol. 8, 1 (2007): 118–127.<br>[6] Dunn, W et al. <a href="https://www.nature.com/articles/nprot.2011.335/"><strong>Procedures for large-scale metabolic profiling of serum and plasma using gas chromatography and liquid chromatography coupled to mass spectrometry.</strong></a> Nature Protocol, 6 (2011): 1060–1083.<br>[7] Sompairac, Nicolas et al. <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6771121/"><strong>Independent Component Analysis for Unraveling the Complexity of Cancer Omics Datasets.</strong></a> International journal of molecular sciences. vol. 20, 18 (2019): 4414.<br>[8] Deng, Kui et al. <a href="https://www.sciencedirect.com/science/article/abs/pii/S0003267019301849/"><strong>WaveICA: A novel algorithm to remove batch effects for large-scale untargeted metabolomics data based on wavelet analysis.</strong></a> Analytica Chimica Acta, Vol. 1061, (2019): 60-69.<br>[9] Rong, Zhiwei et al. <a href="https://pubs.acs.org/doi/10.1021/acs.analchem.9b05460/"><strong>NormAE: Deep Adversarial Learning Model to Remove Batch Effects in Liquid Chromatography Mass Spectrometry-Based Metabolomics Data.</strong></a> Analytical Chemistry, Vol. 92, 7 (2020): 5082–5090.  </p>
]]></content>
      <categories>
        <category>Paper</category>
        <category>BatchEffects</category>
      </categories>
      <tags>
        <tag>BatchEffects</tag>
        <tag>Bioinformatics</tag>
      </tags>
  </entry>
</search>
